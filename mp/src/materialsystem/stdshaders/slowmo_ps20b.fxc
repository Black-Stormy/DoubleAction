#define HDRTYPE HDR_TYPE_NONE

// STATIC: "WITH_BLUR" "0..1" [= 0]
// DYNAMIC: "WITH_VR" "0..1" [= 0]

#include "common_ps_fxc.h"

sampler FBSampler        : register( s0 );
sampler CombinedSampler  : register( s1 );
sampler BlurSampler      : register( s2 );

const float flSlowMoScale   : register( c0 );
const float flStyleSkillAlpha : register( c1 );
const float flGrainOffset   : register( c5 );
const float flDeathCam      : register( c6 );
const float flStyleSkill    : register( c7 );

struct PS_INPUT
{
	float2 texCoord       : TEXCOORD0;
};

HALF4 main( PS_INPUT i ) : COLOR
{
	const float flSlowMoFilter = 0.09;
	const float flVignetteScale = 1;
	const float flNoiseScale = 0.05;

	float2 aflCombinedTexCoord = i.texCoord;

#if WITH_VR
	aflCombinedTexCoord.x = aflCombinedTexCoord.x * 2;
#endif

	float4 aflFB = tex2D( FBSampler, i.texCoord );
	float4 aflCombined = tex2D( CombinedSampler, aflCombinedTexCoord );

	float flGrain;

	if (flDeathCam > 0)
		flGrain = aflCombined.g; // Death cam should be like a photo, so the grain should be static. (As in, not moving.)
	else
		flGrain = tex2D( CombinedSampler, aflCombinedTexCoord + float2(flGrainOffset, flGrainOffset) ).g;

	float flVignetteAlpha = aflCombined.b;
	float flOverlay = aflCombined.r;
	float flBlurAlpha = aflCombined.a;

	float flFBMax = max( aflFB.r, max( aflFB.g, aflFB.b ) );
	float flFBMin = min( aflFB.r, min( aflFB.g, aflFB.b ) );

	float flFBLevel = ( flFBMax + flFBMin ) / 2;
	float flFBSaturation = 0;
	if (flFBMax != flFBMin)
	{
		if (flFBLevel < 0.5)
			flFBSaturation = (flFBMax - flFBMin)/(flFBMax + flFBMin);
		else
			flFBSaturation = (flFBMax - flFBMin)/(2 - flFBMax - flFBMin);
	}

	// Only filter the desaturated and dark areas.
	float flSaturationRamp = RemapValClamped(flFBSaturation, 0, 0.4, 1, 0);
	float flLevelRamp = RemapValClamped(flFBLevel, 0, 0.4, 1, 0);

	float flTotalRamp = max(flSaturationRamp, flLevelRamp);

	float4 aflOutput = aflFB;

#if WITH_BLUR
	float4 aflBlur = tex2D( BlurSampler, aflCombinedTexCoord );

	aflOutput.rgb = lerp(aflOutput.rgb, aflBlur.rgb, flBlurAlpha);
#endif

	// Only do the blue tint if we're not in the death cam.
	if (flDeathCam > 0)
		aflOutput.gb = aflOutput.gb - 0.1 * flTotalRamp;
	else
	{
		float3 aflOverlay = float3(1, 0.82, 0);
		float3 aflConditional = step(0.5, aflOutput.rgb);
		float3 aflOverlaid = lerp(aflOutput*aflOverlay*2, 1 - (2*(1-aflOutput)*(1-aflOverlay)), aflConditional);

		aflOutput.rgb = lerp(aflOutput.rgb, aflOverlaid, flStyleSkill * flStyleSkillAlpha);

		aflOutput.rg = aflOutput.rg - flSlowMoFilter * flTotalRamp * flSlowMoScale;
	}

	aflOutput.rgb = lerp(aflOutput.rgb, float3(0, 0, 0), flVignetteAlpha * flVignetteScale);

	// Adjust levels. Crush the blacks and blow out the whites.
	const float flBias = 0.4;
	const float flExponent = 1.73697f;// log( flBias ) * -1.4427f;
	aflOutput.r = pow(RemapValClamped(aflOutput.r, 0, .63, 0, 1), flExponent);
	aflOutput.g = pow(RemapValClamped(aflOutput.g, 0, .63, 0, 1), flExponent);
	aflOutput.b = pow(RemapValClamped(aflOutput.b, 0, .63, 0, 1), flExponent);

	float flFBGrey = ( aflOutput.r + aflOutput.g + aflOutput.b ) / 3;

	aflOutput.rgb = lerp(aflOutput.rgb, float3(flFBGrey, flFBGrey, flFBGrey), .36);

	// Use a "screen" filter to apply grain to output. This helps bring the general light levels up a bit.
	float3 aflGrain = 1 - (1 - aflOutput.rgb)*(1 - float3(flGrain, flGrain, flGrain));

	// Scale it by the noise scale.
	aflOutput.rgb = lerp(aflOutput.rgb, aflGrain, flNoiseScale);

#if !WITH_VR
	// Don't do the overlay in VR, it won't match up from eye to eye.

	float3 aflOverlay = float3(flOverlay, flOverlay, flOverlay);
	float3 aflConditional = step(0.5, aflOutput.rgb);
	float3 aflOverlaid = lerp(aflOutput*aflOverlay*2, 1 - (2*(1-aflOutput)*(1-aflOverlay)), aflConditional);

	// Scale it by the overlay scale.
	aflOutput.rgb = lerp(aflOutput.rgb, aflOverlaid.rgb, 0.15 * flSlowMoScale);
#endif

	if (flDeathCam > 0)
		return FinalOutput( aflOutput, 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
	else
		return FinalOutput( lerp(aflFB, aflOutput, max(flSlowMoScale, flStyleSkill)), 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
}
